Doc4 - Матеріали для магістерської роботи на базі DevelopMaster
==========================================================

1. Вступні положення
--------------------
- **Мета системи**: розробити комплексну веб-платформу для супроводу юридичних/адміністративних кейсів з інтегрованою аналітикою та модулем експорту.
- **Задачі дослідження**:
  - Проаналізувати бізнес-процеси керування справами.
  - Створити інформаційну структуру бази даних.
  - Реалізувати веб-застосунок із ролями користувачів та інтерактивною аналітикою.
  - Оцінити ефективність системи на тестовому наборі з 1 500 справ.

2. Аналітичний розділ
---------------------
### 2.1 Постановка задачі
- Ключовий процес: від створення справи (заявником) до завершення (виконавцем), включно з комунікаціями й документуванням.
- Необхідний контроль статусів, дедлайнів, регіональної приналежності.
- Інтеграція OLAP для зовнішніх метрик (логіни/реєстрації) забезпечує розширений погляд на активність користувачів.

### 2.2 Порівняльний аналіз
- Короткий огляд аналогів (MS Dynamics, 1C, Jira Service Management, відкриті CRM).
- Обґрунтування вибору технології Laravel (швидкість розробки, інтеграція з Eloquent, зручність для REST/Blade).

3. Проектний розділ
-------------------
### 3.1 Архітектура
- MVC структура, розширена сервісами експорту.
- Схема компонентів (див. Doc3).
- Обґрунтування використання Blade vs SPA.

### 3.2 Модель даних
- ER-діаграма (див. Doc3) + опис кожної сутності.
- Нормалізація: таблиці у 3НФ; у `cases` відсутні дублікати регіонів завдяки нормалізації.
- Регламент збереження документів (filesystem + БД).

### 3.3 Реалізація бізнес-логіки
- Case lifecycle (створення/призначення/дії/закриття).
- Опис функцій класів `CaseController`, `AnalyticsController`, `HomeController`.
- Фільтри аналітики (регіон, статус, виконавець, власник, діапазон дат).

### 3.4 UI/UX рішення
- Структура навігації (dashboard, cases, analytics, notifications, profile).
- Кольорова схема (навігація темно-синя, фон градієнтний).
- Використання Chart.js для діаграм.

4. Технологічний розділ
-----------------------
### 4.1 Середовище розробки
- PHP 8.2, Composer, Laravel Sail (опційно), Node.js 20, npm/vite.
- IDE: PHPStorm/VsCode (рекомендації).

### 4.2 Налаштування
- Опис кроків `composer install`, `npm install`, міграції, сидери (див. Docy/Doc2).
- Конфігурація `.env`, параметри БД/черг/OLAP.
- Пояснення щодо `config/olap.php`.

### 4.3 Автоматизація та DevOps
- Laravel Artisan команди для розгортання.
- Розгортання на Heroku/VPS (приклад): Git + CI/CD (GitHub Actions — тести, збірка).
- Рекомендації щодо контейнеризації (Dockerfile + docker-compose із Sail).

5. Експериментальний розділ
---------------------------
### 5.1 Демонстраційні сценарії
- Масове створення справ через сідери (`UkrainianCaseSeeder`).
- Перевірка фільтрів аналітики (статуси, регіони, виконавці).
- Експорт PDF/Excel (валідність структури документів).

### 5.2 Нагрузочні тести
- Методика: `php artisan tinker` або спеціальні скрипти.
- Показники (time to render pages, SQL query count) — виміряти через Laravel Debugbar (рекомендація) або `laravel/pail`.
- Розрахувати час генерації PDF/Excel при 1 500 справ.

### 5.3 OLAP інтеграція
- Тестове підключення до PostgreSQL з факт-таблицями.
- Перевірка fallback-сценарію у разі відсутності підключення (controller повертає `enabled=false`).

6. Економічна/організаційна частина (за вимогою ВНЗ)
----------------------------------------------------
- Оцінка витрат на розгортання (сервер, домен, хостинг, SSL).
- Вартість розробки (людино-години) та підтримки.
- Організація команди: адміністратор, виконавці, аналітик, DevOps.

7. Висновки
-----------
- Застосунок відповідає функціональним вимогам.
- Масштабується завдяки ролям і гнучким фільтрам.
- Виявлені напрями розвитку: використання Livewire, розширений аудит, інтеграція з зовнішніми реєстрами.

8. Додатки (рекомендації)
-------------------------
- Повні дампи SQL для таблиць (`database/migrations`).
- Повні листинги контролерів/сервісів (додаток у PDF).
- Опис форматів файлів експорту.
- Скрипти для наповнення OLAP (ETL-приклади).

Цей документ підготовлений як каркас для написання магістерської роботи: визначає структуру розділів, аспекти дослідження та точки аналізу. На його основі можна розгорнути повноцінний текст, додаючи результати тестів, порівняльний аналіз і графіки.
