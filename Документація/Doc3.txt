Doc3 - Логіка застосунку та зв’язки з базою даних DevelopMaster
===========================================================

1. Загальна концепція даних
---------------------------
Система побудована навколо сутності **Case** (справа). Справи мають:
- власника (користувач-ініціатор),
- виконавця (юрист або адміністратор),
- список дій (timeline),
- набір документів,
- додаткові атрибути: статус, регіон, строки виконання.

Підтримка аналітики реалізується за рахунок агрегованих запитів до `cases`, `case_actions`, `case_documents`. Додаткові довідники: `positions`, `posts`. Для журналювання активності використовується опціональне підключення до OLAP-фактів (`fact_user_logins`, `fact_user_registrations`).

2. ER-діаграма (ASCII)
----------------------
```
+-----------+       1   ┌─────────────┐   N       +-----------------+
| positions |<----------|   users     |---------->|   cases         |
+-----------+ position  └─────┬──────┬┘ owner_id |  id (PK)        |
    id (PK)                   │role  │           |  user_id (FK)   |
    name                      │      │           |  executor_id FK |
                              │      │1          |  region         |
                              │      └────────────┐                |
                              │ N                 │                |
                              ▼                   ▼                |
                         +----------+     1   +-----------+   N   +----------------+
                         | case_actions |<-------| cases |------->| case_documents |
                         +----------+ type      +-----------+     +----------------+
                             id (PK)            id (PK)           id (PK)
                             case_id FK         ...               case_id FK
                             user_id FK                            uploaded_by FK
                             created_at                            ...
```

Додаткові зв’язки:
- `users` (роль `executor` або `admin`) можуть бути виконавцями справ (`cases.executor_id`).
- `users` (роль `applicant`) ініціюють створення справ.
- `case_actions.user_id` вказує, хто виконав дію (як правило, виконавець).
- `case_documents.uploaded_by` посилається на користувача, що завантажив документ.
- `posts` пов’язані з `users` (автори новин на головній).

3. Таблиця зв’язків (текстовий опис)
------------------------------------
| Сутність A          | Сутність B         | Тип зв’язку | Ключі                              |
|---------------------|--------------------|-------------|------------------------------------|
| users               | positions          | Багато-до-одного | `users.position_id` → `positions.id` |
| cases               | users (owner)      | Багато-до-одного | `cases.user_id` → `users.id`         |
| cases               | users (executor)   | Багато-до-одного | `cases.executor_id` → `users.id`     |
| case_actions        | cases              | Багато-до-одного | `case_actions.case_id` → `cases.id`  |
| case_actions        | users              | Багато-до-одного | `case_actions.user_id` → `users.id`  |
| case_documents      | cases              | Багато-до-одного | `case_documents.case_id` → `cases.id`|
| case_documents      | users              | Багато-до-одного | `case_documents.uploaded_by` → `users.id`|
| posts               | users              | Багато-до-одного | `posts.user_id` → `users.id`         |
| fact_user_logins    | (зовнішнє OLAP)    | N/A (окрема БД) | Підключення через `config/olap.php` |

4. Взаємодія логіки з БД (Case lifecycle)
-----------------------------------------
1. **Створення справи** (`CaseController@store`):
   - валідація вхідних даних;
   - `CaseModel::create(...)` з полями `user_id`, `executor_id`, `region`, `status='new'`;
   - створення запису `CaseAction` типу `created`;
   - додаткове завантаження документів → `CaseDocument::create`.

2. **Таймлайн** (`CaseController@addAction` + `CaseModel->actions`):
   - дії зберігаються у `case_actions` з прив’язкою до справи й користувача;
   - виводяться у `resources/views/cases/show.blade.php`.

3. **Документи** (`CaseController@uploadDocument`, `CaseDocumentController`):
   - файл потрапляє у `storage/app/public/cases/{id}/...`;
   - БД зберігає метадані (`title`, `mime_type`, `file_size`);
   - доступ здійснюється через `route('cases.documents.download')` і storage symlink.

4. **Аналітика** (`AnalyticsController@index/records`):
   - формуються агреговані запити до `cases`, `case_actions`, `case_documents`;
   - для фільтрів використовується `AnalyticsCaseFilter` (маніпулює Builder) → наслідок напряму відображається у діаграмах.

5. **Експорт**:
   - PDF: читає `case_actions`, `case_documents`, відтворює у шаблоні PDF.
   - Excel: комбінує кілька колекцій (справи, екшени, документи) після фільтрування й перетворює на HTML-таблиці.

5.3. Примітки щодо цілісності
------------------------------
- Міграції встановлюють `cascadeOnDelete` або `nullOnDelete` для FK (наприклад, `executor_id` → `set null`).
- У сидерах використовується `DB::statement('TRUNCATE ... CASCADE')` для повного скидання збережених даних.
- `CaseModel::booted` гарантує, що якщо `region` пустий, він буде витягнутий з заголовка (формат `(..., ...)`).

6. Діаграма потоків (створення та перегляд справи)
-------------------------------------------------
```
[Користувач (applicant)]
        |
        |  (POST /cases)
        v
[CaseController@store] --створює--> [cases]
        |                             |
        | створює дії                  |
        v                             v
[case_actions] <---upload--- [case_documents]
        |
        |  (GET /cases/{id})
        v
[CaseController@show] --load relationships--> Blade view
```

7. OLAP інтеграція
------------------
- Конфігурація: `config/olap.php` вказує підключення (`olap` у `config/database.php`).
- `AnalyticsController@loadOlapSummary`:
  - `DB::connection(config('olap.connection'))` → запити до факт-таблиць.
  - Очікує структуру: `fact_user_logins(date_key, login_count)` та `fact_user_registrations(date_key, ...)`.
  - Повертає масив для діаграм Chart.js на дашборді й аналітиці.
- У випадку відсутності джерела — метод ловить виняток і повертає `enabled = false`.

8. Зведена таблиця полів (головні сутності)
-------------------------------------------
```
cases
-----
id (PK, bigint)
user_id (FK -> users.id)
executor_id (FK -> users.id, nullable)
region (varchar 120, індекс)
status (varchar, індекс)
title, description
claimant_name, debtor_name
deadline_at (timestamp)
created_at, updated_at

case_actions
------------
id (PK)
case_id (FK -> cases.id)
user_id (FK -> users.id)
type (varchar)
notes (text)
created_at, updated_at

case_documents
--------------
id (PK)
case_id (FK -> cases.id)
uploaded_by (FK -> users.id)
title (varchar)
path (varchar)
file_size (bigint)
mime_type (varchar)
created_at, updated_at
```

9. Додаткові сутності
---------------------
- `positions`: забезпечують довідник посад для користувачів (використовується у профілі та сидерах).
- `posts`: новини/замітки на головній сторінці.
- `sessions`: стандартна Laravel таблиця для роботи з Redis/БД-сесіями.
- `olap_activity_log` (якщо використовується для ETL).

10. Рекомендації щодо подальшого моделювання
-------------------------------------------
- Розділити `cases` на окремі таблиці для фінансових/процесуальних атрибутів, якщо система розшириться.
- Ввести історію призначень виконавців (окрема таблиця для track changes).
- Використати `spatie/laravel-activitylog` для деталізованого аудиту.
- Побудувати materialized views для повільних аналітичних віджетів.

Документ орієнтований на розробників БД та архітекторів, що мають підтримувати структуру даних і логіку взаємодії. Він доповнює `Docy.txt` та `Doc2.txt`, акцентуючи увагу на залежностях між сутностями та бізнес-процесами.
